<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>1.21+NeoForge与Bukkit网络通信</title>
    <link href="/1-21-NeoForge%E4%B8%8EBukkit%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    <url>/1-21-NeoForge%E4%B8%8EBukkit%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/</url>
    
    <content type="html"><![CDATA[<p>在旧版本 Forge 与 Bukkit 的通信中使用 <code>PluginMessageRecipient</code> 的 <code>sendPluginMessage</code>，新版本 NeoForge 依旧使用该方法。</p><p>与之前不同的是 NeoForge 在<a href="https://neoforged.net/news/20.4networking-rework/">网络更新</a>后使用 payload，使用原版的流程，从以往在数据中填入数字 id 不同，改为在 channel 中填写 payload 的 id，这在 <a href="https://wiki.vg/Plugin_channels">wiki</a> 中也可以找到蛛丝马迹。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Bukkit</tag>
      
      <tag>NeoForge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>moj_import</title>
    <link href="/moj-import/"/>
    <url>/moj-import/</url>
    
    <content type="html"><![CDATA[<p>mojang 对 glsl 的预处理有拓展，位于 <code>com.mojang.blaze3d.preprocessor.GlslPreprocessor</code>，最主要的功能是实现 #moj_import。</p><p>根据默认实现，EffectProgram（后处理着色器使用的着色器程序）无法进行 #moj_import 的操作。</p><p>#moj_import 会匹配 <code>#moj_import &quot;&quot;</code> 或 <code>#moj_import &lt;&gt;</code>（就像是 c 语言的 #include）。</p><p>引号代表使用相对位置。例如，着色器是 <code>shaders/core/abc.glsl</code>，在该着色器内写入 <code>#moj_import &quot;cde.glsl&quot;</code> 会尝试找 <code>shaders/core/cde.glsl</code> 文件。</p><p>尖括号代表绝对位置。例如，着色器是 <code>shaders/core/abc.glsl</code>，在该着色器内写入 <code>#moj_import &lt;cde.glsl&gt;</code> 会尝试找 <code>shaders/include/cde.glsl</code> 文件。</p>]]></content>
    
    
    
    <tags>
      
      <tag>render</tag>
      
      <tag>minecraft</tag>
      
      <tag>shader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RenderDoc在Minecraft中的使用</title>
    <link href="/RenderDoc%E5%9C%A8Minecraft%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/RenderDoc%E5%9C%A8Minecraft%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p><a href="https://gist.github.com/T3sT3ro/e43b714ee6ca97ec4b0cb65fc606ffac">其他人写的教程</a></p><p>可以在 build.gradle 中放置如下内容，将会生成一个名为 runWithRenderDoc 的任务，执行该任务即可。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs groovy">tasks.register(<span class="hljs-string">&quot;runWithRenderDoc&quot;</span>, Exec) &#123;<br>    <span class="hljs-keyword">def</span> javaExecTask = tasks.withType(JavaExec).named(<span class="hljs-string">&quot;runClient&quot;</span>).get()<br>    <span class="hljs-keyword">def</span> javaHome = javaExecTask.javaLauncher.get().metadata.installationPath.asFile.absolutePath<br><br>    commandLine = [<br>            <span class="hljs-string">&quot;E:\\RenderDoc\\renderdoccmd.exe&quot;</span>,<br>            <span class="hljs-string">&quot;capture&quot;</span>,<br>            <span class="hljs-string">&quot;--opt-hook-children&quot;</span>,<br>            <span class="hljs-string">&quot;--wait-for-exit&quot;</span>,<br>            <span class="hljs-string">&quot;--working-dir&quot;</span>,<br>            <span class="hljs-string">&quot;.&quot;</span>,<br>            <span class="hljs-string">&quot;$javaHome/bin/java.exe&quot;</span>,<br>            <span class="hljs-string">&quot;-Xmx64m&quot;</span>,<br>            <span class="hljs-string">&quot;-Xms64m&quot;</span>,<br>            <span class="hljs-string">&quot;-Dorg.gradle.appname=gradlew&quot;</span>,<br>            <span class="hljs-string">&quot;-Dorg.gradle.java.home=$javaHome&quot;</span>,<br>            <span class="hljs-string">&quot;-classpath&quot;</span>,<br>            <span class="hljs-string">&quot;gradle/wrapper/gradle-wrapper.jar&quot;</span>,<br>            <span class="hljs-string">&quot;org.gradle.wrapper.GradleWrapperMain&quot;</span>,<br>            <span class="hljs-string">&quot;runClient&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/RenderDoc%E5%9C%A8Minecraft%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/bd405292b063d527f1c9ad0559680c06.png" alt="alt text"><br><img src="/RenderDoc%E5%9C%A8Minecraft%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/6fb47941a9eb5cd6a148fe8c8aeae5af.png" alt="alt text"></p>]]></content>
    
    
    
    <tags>
      
      <tag>render</tag>
      
      <tag>minecraft</tag>
      
      <tag>renderdoc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>谈谈什么是游戏机制</title>
    <link href="/%E8%B0%88%E8%B0%88%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%B8%E6%88%8F%E6%9C%BA%E5%88%B6/"/>
    <url>/%E8%B0%88%E8%B0%88%E4%BB%80%E4%B9%88%E6%98%AF%E6%B8%B8%E6%88%8F%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<p>经常有听到很多人对一个名词的讨论 —— 游戏机制。</p><p>不同的人对这个名词有着不同的理解，我个人认为，游戏机制本身是规定了游戏本身对玩家行为的反应，从玩家的角度来看，就是游戏允许他们做什么事。</p><p>即：游戏机制是游戏规则的外显，游戏规则是游戏机制的内核。</p><p>所以不能同时给玩家展示太多，这会陷入选择超载的问题。</p><p>一些心理学家认为，人不能同时处理五到七种以上的选择，我想用到这里也是对等的。</p><p>比如一个经典的 RPG 游戏，进入以后一般只有一个选择：剧情。</p><p>在度过新手教程和基本引导后，看到了许多内容：血量、攻击、经验、技能这些养成相关的。</p><p>然后选择就来了：过剧情还是去杀怪获得经验？</p><p>如果丰富一些，给你展示采集资源、技能熟练度、宠物、符文、附魔、锻造···</p><p>这实在太可怕了。</p><p>也因此 RPG 游戏很多都有一个机制：按等级解锁。</p><p>有的游戏会解锁得更多，有的游戏解锁得更少，但解锁得多的并不是拓展了机制的种类，而是围绕现有机制增加功能。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>控制论与心理学在游戏方面的应用</title>
    <link href="/%E6%8E%A7%E5%88%B6%E8%AE%BA%E4%B8%8E%E5%BF%83%E7%90%86%E5%AD%A6%E5%9C%A8%E6%B8%B8%E6%88%8F%E6%96%B9%E9%9D%A2%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <url>/%E6%8E%A7%E5%88%B6%E8%AE%BA%E4%B8%8E%E5%BF%83%E7%90%86%E5%AD%A6%E5%9C%A8%E6%B8%B8%E6%88%8F%E6%96%B9%E9%9D%A2%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>玩家在讨厌被控制的同时在享受被控制。</p><p>我想，他们讨厌的应该是被控制的感觉，而不是被控制的实质。</p><p>因为需要了解玩家喜好、更贴合玩家的游玩习惯，就需要更多的玩家的行为信息，在了解后游戏通过一系列措施调整，最后更符合玩家习惯 —— 也就是达到了目标，这个过程就是控制。</p><p>但是控制这个词本身暗含了一种奴役、压迫的情感，好，现在我们有个更优雅的词 —— 个性化！</p><p>我不想做什么“震惊！揭露游戏界暗黑内幕”之类的无聊的事，因为个性化本质也是双刃剑，当下的人究竟能不能接受用一定的“隐私”来换取更好的体验，我想由抖音的爆火就能看出来。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>探探精神需求在游戏中的体现</title>
    <link href="/%E6%8E%A2%E6%8E%A2%E7%B2%BE%E7%A5%9E%E9%9C%80%E6%B1%82%E5%9C%A8%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E4%BD%93%E7%8E%B0/"/>
    <url>/%E6%8E%A2%E6%8E%A2%E7%B2%BE%E7%A5%9E%E9%9C%80%E6%B1%82%E5%9C%A8%E6%B8%B8%E6%88%8F%E4%B8%AD%E7%9A%84%E4%BD%93%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>最近发现，玩家主动维护社区形成的行为和其本身的利益是相向的。</p><p>之前我认为，部分玩家某些时候像是被社区裹挟，为社区和游戏本身“打工”，但实际上也是在进行艺术的生产与消费。</p><p>但人们不仅仅满足于消费自己的作品，于是社区就产生了。</p><p>为了能够消费更多的艺术作品，维护游戏社区的网络效应，就必须为社区的维持进行创作，因此每个人都在为了能消费更多的艺术作品而进行创作，本身是在满足自己的精神需求。</p><p>所以能够制作 mod 为游戏填充内容的沙盒游戏的生命力才如此悠长和旺盛 —— 比如《我的世界》与《泰拉瑞亚》。</p><hr><p>而游戏内也可以有这样的循环，之前我把玩家追求的东西叫做“创造感”，我觉得这个名字还是挺贴切的。</p><p>玩家在有限的规则下，付出时间后，改变游戏本身呈现出来的内容，我认为这个过程能叫做“创造”。</p><p>因此，制作《我的世界》的 mod 的过程，也是在玩《我的世界》这款游戏。</p><hr><p>也不只是这样的游戏才能满足创造感，哪怕是一些对话也可以 —— 也因此，玩家们会在一个视觉小说游戏的评判标准中有一个“可以选择的线路是否足够多”。</p><p>玩家喜欢那种把控住了本来无法把控的东西的感觉，我认为这是创造感的一种，其本身是一种对“创造秩序”的追求。</p><p>也因此，玩家会对随机的东西感兴趣：尤其是当他认为随机的内容朝着他希望的方向发展。</p><p>这些年来关于“伪随机”的各种讨论都印证了：玩家讨厌失去“未知”，他们并不想一切东西都“尽在掌握”。</p><p>但玩家同时也期待着其时间投入与其所获得的艺术产品 —— 也就是能够满足他们创造感的东西是呈正相关的。</p><p>也因此数值策划才会如此艰难：很多时候，优美的解是无趣的，难以设计一套能够控制但是使玩家感到动力十足的数值。</p><p>要有一定的浮动使得玩家拥有动力，大体上需要符合玩家的期待不会让玩家失望，最后又需要抑制过快的增长保证游戏整体依旧处于可以控制的范围。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Minecraft的ShaderTextures</title>
    <link href="/Minecraft%E7%9A%84ShaderTextures/"/>
    <url>/Minecraft%E7%9A%84ShaderTextures/</url>
    
    <content type="html"><![CDATA[<p>我相信部分人接触新版本后，对 setShaderTexture 有很多不解，基本抄原版代码实现功能。</p><p>RenderSystem 中的 shaderTextures 预留的有 12 个，都代表什么呢？</p><p>1 是 OverlayTexture</p><p>OverlayTexture 是 “覆盖纹理”，负责实体受伤和爬行者爆炸时的效果。</p><p>2 是 LightTexture</p><p>可以用 RenderDoc 查看 Sampler2:<br><img src="/RenderDoc.png" alt="RenderDoc"></p><p>lightMap 的纹理有 16 x 16，FULL_LIGHT 对应的坐标为 (15,15)。</p><p>因此，若光照大于 FULL_LIGHT，则会出现各种问题，这取决于当前管线的着色器的行为。</p><p>lightMap 的横轴为 block，纵轴为 sky，观察导出的 lightMap 可以看出，在 MC 原版的行为中，若方块光足够强则可以无视天光的影响。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>图形学梳理</title>
    <link href="/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A2%B3%E7%90%86/"/>
    <url>/%E5%9B%BE%E5%BD%A2%E5%AD%A6%E6%A2%B3%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="基础线代知识"><a href="#基础线代知识" class="headerlink" title="基础线代知识"></a>基础线代知识</h2><p>时至今日，各类工具使得人们不必再掌握全部的计算，相比计算，我想学习图形学需要更多几何直觉而不是计算方式。</p><h3 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h3><h4 id="点乘、叉乘"><a href="#点乘、叉乘" class="headerlink" title="点乘、叉乘"></a>点乘、叉乘</h4><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><h3 id="模型、相机（视图）"><a href="#模型、相机（视图）" class="headerlink" title="模型、相机（视图）"></a>模型、相机（视图）</h3><h3 id="投影（正交、透视）"><a href="#投影（正交、透视）" class="headerlink" title="投影（正交、透视）"></a>投影（正交、透视）</h3><h3 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h3><h2 id="光栅化"><a href="#光栅化" class="headerlink" title="光栅化"></a>光栅化</h2><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><p>信号学</p><h3 id="反走样"><a href="#反走样" class="headerlink" title="反走样"></a>反走样</h3><h2 id="着色"><a href="#着色" class="headerlink" title="着色"></a>着色</h2><h3 id="画家算法、z-buffer"><a href="#画家算法、z-buffer" class="headerlink" title="画家算法、z-buffer"></a>画家算法、z-buffer</h3><h3 id="光照计算"><a href="#光照计算" class="headerlink" title="光照计算"></a>光照计算</h3><h4 id="光照模型：Phong"><a href="#光照模型：Phong" class="headerlink" title="光照模型：Phong"></a>光照模型：Phong</h4><p>镜面反射出的光线与观察者视线的夹角。</p><p>改进的算法：入射与视线的半向量（归一化后的（入射 + 视线））与法线的夹角。</p><p>L &#x3D; La + Ld + Ls &#x3D; ka * Ia + kd * (I &#x2F; r^2) * max(0, n dot l) + ks (I &#x2F; r2) * max(0, n dot h) ^ p</p><p>k 为漫反射系数（颜色），I 为光照强度，r 为测试点距离光照中心的距离，n 为法向量，l 为入射向量，h 为半向量，p 越大，高光越小。</p><h4 id="光照频率：面、顶点、像素（Phong）"><a href="#光照频率：面、顶点、像素（Phong）" class="headerlink" title="光照频率：面、顶点、像素（Phong）"></a>光照频率：面、顶点、像素（Phong）</h4><p>Phong 英年早逝，实属可惜。</p><p>顶点法线：附近面加权平均，面的面积越大权越大。</p><p>面内的像素法线：重心坐标（下面讲）</p><h3 id="实时渲染管线"><a href="#实时渲染管线" class="headerlink" title="实时渲染管线"></a>实时渲染管线</h3><p>一系列操作的过程叫做管线。</p><p>顶点 -&gt; 顶点处理 </p><p>-&gt; 屏幕空间顶点 -&gt; 三角处理 </p><p>-&gt; 屏幕空间三角 -&gt; 光栅化 </p><p>-&gt; 图元 -&gt; 图元处理 </p><p>-&gt; 着色图元 -&gt; 帧缓冲操作 </p><p>-&gt; 图像（像素数组）</p><p>着色器（shader）：在可编程管线中，负责处理着色的东西</p><h3 id="纹理映射"><a href="#纹理映射" class="headerlink" title="纹理映射"></a>纹理映射</h3><p>重心坐标：(a, b, c) 满足以下条件： (x, y) &#x3D; aA + bB + cC; a + b + c &#x3D; 1;<br>若点在三角形内，需要所有数都为非负的。</p><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><p>临近：寻找最近的纹理</p><p>双线性（Bilinear）：取临近的四个进行线性插值</p><p>双立方（Bicubic）：取临近的十六个进行三次插值</p><h4 id="大尺寸纹理"><a href="#大尺寸纹理" class="headerlink" title="大尺寸纹理"></a>大尺寸纹理</h4><p>会导致采样率不足，单像素对应的点过多</p><p>经典问题：点查询，范围查询问题（平均值）</p><h4 id="Mipmap"><a href="#Mipmap" class="headerlink" title="Mipmap"></a>Mipmap</h4><p>Mipmap -&gt; 快速，非准确，正方形的范围查询。</p><p>基本思想为提前进行多级的平均计算，增加的额外空间为 1&#x2F;3。</p><ul><li>lv0 -&gt; 128x</li><li>lv1 -&gt; 64x</li><li>lv2 -&gt; 32x</li><li>lv3 -&gt; 16x</li><li>lv4 -&gt; 8x</li><li>lv5 -&gt; 4x</li><li>lv6 -&gt; 2x</li><li>lv7 -&gt; 1x</li></ul><p>总共有 log2 层，每层是上层的一半。</p><p>mipmap D 与 D+1 之间进行三线性插值（Trilinear）：D 进行一次双线性，D + 1 进行一次，他们的结果进行一次。</p><p>mipmap 的问题：会出现 overblur，远处细节丢失</p><h4 id="各向异性过滤"><a href="#各向异性过滤" class="headerlink" title="各向异性过滤"></a>各向异性过滤</h4><p>生成 Ripmap，允许对长条形区域进行查询</p><p>相比 mipmap 解决长条问题，但未解决斜着的问题。开销增加为 3x</p><h4 id="EWA-过滤"><a href="#EWA-过滤" class="headerlink" title="EWA 过滤"></a>EWA 过滤</h4><h2 id="几何"><a href="#几何" class="headerlink" title="几何"></a>几何</h2><h3 id="环境光（可以用纹理表达）"><a href="#环境光（可以用纹理表达）" class="headerlink" title="环境光（可以用纹理表达）"></a>环境光（可以用纹理表达）</h3><p>球形环境光</p><p>球形图 问题：展开会扭曲</p><p>立方图 球映射到包围他的立方体</p><h3 id="法线贴图"><a href="#法线贴图" class="headerlink" title="法线贴图"></a>法线贴图</h3><p>调光照</p><h3 id="位移贴图"><a href="#位移贴图" class="headerlink" title="位移贴图"></a>位移贴图</h3><p>调顶点</p><h3 id="几何分类"><a href="#几何分类" class="headerlink" title="几何分类"></a>几何分类</h3><h4 id="隐式"><a href="#隐式" class="headerlink" title="隐式"></a>隐式</h4><h5 id="距离函数"><a href="#距离函数" class="headerlink" title="距离函数"></a>距离函数</h5><h6 id="水平集"><a href="#水平集" class="headerlink" title="水平集"></a>水平集</h6><h5 id="分型"><a href="#分型" class="headerlink" title="分型"></a>分型</h5><h4 id="显式"><a href="#显式" class="headerlink" title="显式"></a>显式</h4>]]></content>
    
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MythicMobsSkill系统拆解</title>
    <link href="/MythicMobsSkill%E7%B3%BB%E7%BB%9F%E6%8B%86%E8%A7%A3/"/>
    <url>/MythicMobsSkill%E7%B3%BB%E7%BB%9F%E6%8B%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<div class="alert alert-danger"><i class="fa fa-bug  float-left"></i>  <p>本文不强调如何使用，而是从一个开发者的视角去尝试分析。</p></div><p><del>神话暴徒</del> MythicMobs 中，有一个较为重要的子系统为 <code>Skill</code>，本文将尝试拆解 <code>Skill</code> 系统。</p><hr><p>技能由几个不同的部分组成：</p><ul><li>Mechanics         机制<ul><li>Effects         效果</li></ul></li><li>Triggers          触发器</li><li>Targeters         目标选择器</li><li>Health Modifiers  生命值修饰符</li><li>Chance            几率</li></ul><p>官方在 wiki 中首先就给出了一个例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Skills</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ignite&#123;ticks=100&#125;</span> <span class="hljs-string">@target</span> <span class="hljs-string">~onAttack</span> <span class="hljs-string">&lt;50%</span> <span class="hljs-number">0.5</span><br></code></pre></td></tr></table></figure><p>由此引入了第一部分：</p><h2 id="Mechanics-——-机制"><a href="#Mechanics-——-机制" class="headerlink" title="Mechanics —— 机制"></a>Mechanics —— 机制</h2><p>同时也给出了标准语法：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Skills</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mechanic&#123;argument=value&#125;</span> <span class="hljs-string">@[targeter]</span> <span class="hljs-string">~on[trigger]</span> [<span class="hljs-string">health_modifier</span>] [<span class="hljs-string">chance</span>]<br></code></pre></td></tr></table></figure><p>这里可以查到<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Mechanics">所有官方提供的 Mechanics</a> </p><p>参数（argument）部分简单直接，<code>&#123;key1=value1;key2=value2&#125;</code>，机制部分就像是在调用一个函数，而参数等同于函数的参数。</p><p>在 MythicMobs 4.12 后加入了技能参数功能，现在你自定义的函数可以加参数了（奇怪的说法），标准定义为在本该是 value 的位置替换为占位符 <code>&lt;skill.paramsName&gt;</code>。</p><p>占位符的定义可以在<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Placeholders">这里</a>找到。</p><p>举个例子，如果我有一个 Skill：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">SomeSkill:</span><br>    <span class="hljs-attr">Skills:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">ignite&#123;ticks=&lt;skill.tickParams&gt;&#125;</span> <span class="hljs-string">@target</span> <span class="hljs-string">~onAttack</span><br></code></pre></td></tr></table></figure><p>那么调用它时就可以用 <code>skill:SomeSkill&#123;tickParams=50&#125;</code> 这样的方式，如果起了相同的参数名，则后面的会取代前面的。</p><p>类似的，替换了技能的名称的部分为占位符的，被称为 <a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/skills/mechanics/variableskill">VariableSkill</a>。</p><hr><h3 id="Effcts-——-效果"><a href="#Effcts-——-效果" class="headerlink" title="Effcts —— 效果"></a>Effcts —— 效果</h3><p>效果像是特殊的机制，可以在<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/skills/effects/">这里</a>找到官方提供的内容。</p><p>用法与机制一致，但专为特殊效果设计。</p><hr><h2 id="Targeters-——-目标选择器"><a href="#Targeters-——-目标选择器" class="headerlink" title="Targeters —— 目标选择器"></a>Targeters —— 目标选择器</h2><p>目标选择器是另一个实现技能的核心，当然了，没有目标的技能放来何用呢？</p><p>可以看到，<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Targeters/">MythicMobs 原版的 Targets</a> 相当的多，足以覆盖大部分使用场景。</p><p>目标选择器则以 <code>@</code> 开头。</p><p>类似的，目标选择器也有参数，不再赘述。</p><hr><h2 id="Triggers-——-触发器"><a href="#Triggers-——-触发器" class="headerlink" title="Triggers —— 触发器"></a>Triggers —— 触发器</h2><p>触发器代表着技能触发的时机，也就是说，没有这个放不了。</p><p>在<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Triggers">这里</a>可以找到原版触发器。</p><p>触发器以 <code>~</code> 开头，通常是类似 <code>~onAttack</code> 的形式出现。</p><p>这里有一个比较有意思的部分，目标选择器和触发器能够协同工作，比如 <code>@Trigger ~onInteract</code> 就代表着右键单击生物（与生物互动）的玩家将被点燃，因为他们是 <code>@Trigger</code>。</p><hr><h2 id="Health-Modifiers-——-生命值修饰符"><a href="#Health-Modifiers-——-生命值修饰符" class="headerlink" title="Health Modifiers —— 生命值修饰符"></a>Health Modifiers —— 生命值修饰符</h2><p>这部分是可选的。</p><p>以 <code>&gt;</code>、<code>&lt;</code>、<code>=</code> 三个符号开头（竟然不支持 &gt;&#x3D; ？），后跟一个数字或区间，例如 <code>&gt;500</code> 就是在生物生命值大于五百情况下才触发，同理 <code>&lt;20%</code> 就是小于 20%，另外还有一个特殊的情况，<code>=30%-50%</code>，这意味着会在 30% 到 50% 之间触发。</p><hr><h2 id="Chance-——-几率"><a href="#Chance-——-几率" class="headerlink" title="Chance —— 几率"></a>Chance —— 几率</h2><p>这部分也是可选的。</p><p>这部分也是技能定义中最后一部分了，这意味着技能释放成功的几率。</p><p>1.0 对应着 100%，0.5 对应 50%。</p><hr><p>至此，单个技能的使用的部分结束。</p><hr><h2 id="MetaSkill-——-元技能"><a href="#MetaSkill-——-元技能" class="headerlink" title="MetaSkill —— 元技能"></a>MetaSkill —— 元技能</h2><p>语法如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">internal_skillname:</span><br>  <span class="hljs-attr">Cooldown:</span> [<span class="hljs-string">seconds</span>]<br>  <span class="hljs-attr">OnCooldownSkill:</span> [<span class="hljs-string">the</span> <span class="hljs-string">metaskill</span> <span class="hljs-string">to</span> <span class="hljs-string">execute</span> <span class="hljs-string">if</span> <span class="hljs-string">this</span> <span class="hljs-string">one</span> <span class="hljs-string">is</span> <span class="hljs-string">on</span> <span class="hljs-string">cooldown</span>]<br>  <span class="hljs-attr">CancelIfNoTargets:</span> [<span class="hljs-literal">true</span><span class="hljs-string">/false</span>]<br>  <span class="hljs-attr">Conditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">condition1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">condition2</span><br>  <span class="hljs-attr">TargetConditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">condition3</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">condition4</span><br>  <span class="hljs-attr">TriggerConditions:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">condition5</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">condition6</span><br>  <span class="hljs-attr">Skills:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mechanic1</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">mechanic2</span><br></code></pre></td></tr></table></figure><p>internal_skillname 部分是元技能的标识符，唯一且不含空格，用于调用时的定位。</p><p>Cooldown 就是冷却时间，可以使用占位符。</p><p>技能通常从列表中的第一个执行到最后一个。如果使用元机制，其机制将在原始元技能的机制恢复执行之前执行。如果被调用的元技能中存在延迟，则原始元技能的机制将恢复执行，而被调用元技能中存在的机制将在延迟后执行。</p><p>直接说起来有些抽象，<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Metaskills#skills">官网的例子</a>非常合适。</p><p>而 Skills 部分不能有触发器，允许有目标选择器，当 MetaSkill 中一条 skill 未指定目标时，会继承来自于调用者的目标。</p><hr><h3 id="Conditions-——-条件"><a href="#Conditions-——-条件" class="headerlink" title="Conditions —— 条件"></a>Conditions —— 条件</h3><p>条件可以分为三种类型：</p><ul><li>实体条件（Entity Conditions）：这些条件检查实体的条件。</li><li>位置条件（Location Conditions）：这些条件检查某个位置的条件。如果在定位实体时使用位置条件，它将检查实体位置的条件。</li><li>比较条件（Compare conditions）：这些检查两个不同“事物”之间的某些条件。例如，如果目标位于角为两个坐标的立方体内，则“Cuboid”将返回true，而“StringEquals”将根据两个字符串是否匹配返回true或false。</li></ul><p>条件也可以在元技能中的三个不同位置使用：</p><ul><li>条件（Conditions）：此部分中的条件检查脚轮的条件或脚轮的位置。</li><li>目标条件（TargetConditions）：此部分中的条件检查从技能的目标者继承的目标或目标位置的条件。</li><li>触发条件（TriggerConditions）：此部分中的条件检查触发技能的实体的条件。</li></ul><p>格式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">SkillName:</span><br>  <span class="hljs-attr">Conditions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">condition</span> [<span class="hljs-string">variable</span>]<br>  <span class="hljs-attr">TargetConditions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">condition</span> [<span class="hljs-string">variable</span>] [<span class="hljs-string">action</span>]<br>  <span class="hljs-attr">TriggerConditions:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">condition</span> [<span class="hljs-string">variable</span>] [<span class="hljs-string">action</span>] [<span class="hljs-string">action_variable</span>]<br>    <span class="hljs-bullet">-</span> <span class="hljs-string">condition&#123;variable1=value;variable2=value&#125;</span> [<span class="hljs-string">action</span>] [<span class="hljs-string">action_variable</span>]<br></code></pre></td></tr></table></figure><p>条件中可以使用范围数字，<code>#to#</code> 或是 <code>#-#</code>，## 的位置为数字。</p><p>条件可以用<code>或（||）</code>或者<code>与（&amp;&amp;）</code>运算符合并。</p><p>action 部分指定了条件的行为：</p><ul><li>required (or true) ：符合条件运行</li><li>cancel (or false) ：符合条件不运行</li><li>power [multiplier] ：修改技能的功率</li><li>cast [skill] ：符合条件则额外释放技能</li><li>castinstead [skill] ：符合条件则改为释放其他技能</li><li>orElseCast [skill] ：MM 4.12 新增，不符合条件则改为释放其他技能</li></ul><p>Premium 版中，给出了<a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/skills/conditions/in-linetargetconditions">一种方式</a>可以实现内联的条件，以实现更精细的条件管理，尽管普通版也可以使用 Skill 嵌套的方式实现，不过该种方式确实减少了一些需要书写的内容。</p><hr><h2 id="变量与数学运算"><a href="#变量与数学运算" class="headerlink" title="变量与数学运算"></a>变量与数学运算</h2><p><a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Variables">https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Variables</a></p><p><a href="https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Math">https://git.mythiccraft.io/mythiccraft/MythicMobs/-/wikis/Skills/Math</a></p><hr><p>在我看来，MM Skill 的定义绝对算得上 DSL 的一种，像是这种 DSL，完全可以使用 <a href="https://github.com/antlr/antlr4">Antlr</a> 来构建。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Plugin</tag>
      
      <tag>MythicMobs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bukkit中构建后自动打开服务端</title>
    <link href="/Bukkit%E4%B8%AD%E6%9E%84%E5%BB%BA%E5%90%8E%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    <url>/Bukkit%E4%B8%AD%E6%9E%84%E5%BB%BA%E5%90%8E%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p>作为一个 Mod 开发者，自开发插件以来，一直在想一个问题：为什么插件开发不能一键调试呢？</p><p>终于，在一个风雨交加的夜晚，我忍无可忍，于是便有了本文。</p><div class="alert alert-danger"><i class="fa fa-bug  float-left"></i>  <p>注意：由于本人 Gradle 水平堪比学前班，所以不建议将本文内容视为最佳实践<br>本文仅适用于 IDEA，本人测试版本为 2023.1</p></div><h2 id="添加变量"><a href="#添加变量" class="headerlink" title="添加变量"></a>添加变量</h2><p>先在 <code>gradle.properties</code> 中添加两个变量：</p><ul><li><code>targetServerPath</code>     : 服务端所在的文件夹，比如 <code>D:\Server</code></li><li><code>targetServerJarName</code>  : 服务端的名称，比如 <code>xx-server.jar</code></li></ul><p>按照如上设置，本文提供的方法会查找 <code>D:\Server\xx-server.jar</code> 启动。</p><h2 id="复制构建产物至目标服务端的插件文件夹"><a href="#复制构建产物至目标服务端的插件文件夹" class="headerlink" title="复制构建产物至目标服务端的插件文件夹"></a>复制构建产物至目标服务端的插件文件夹</h2><p>在 <code>build.gradle</code> 中添加如下内容：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs groovy">tasks.register(<span class="hljs-string">&#x27;copyArtifacts&#x27;</span>, Copy) &#123;<br>    from <span class="hljs-string">&#x27;build/libs&#x27;</span><br>    into <span class="hljs-string">&quot;$&#123;targetServerPath&#125;/plugins/&quot;</span><br>    include <span class="hljs-string">&#x27;**/*.jar&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="生成-runServer-运行配置"><a href="#生成-runServer-运行配置" class="headerlink" title="生成 runServer 运行配置"></a>生成 runServer 运行配置</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs groovy"><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerException<br><span class="hljs-keyword">import</span> javax.xml.transform.TransformerFactory<br><span class="hljs-keyword">import</span> javax.xml.transform.dom.DOMSource<br><span class="hljs-keyword">import</span> javax.xml.transform.stream.StreamResult<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">void</span> createOption(document, parent, String name, String value) &#123;<br>    <span class="hljs-keyword">final</span> var option = document.createElement(<span class="hljs-string">&quot;option&quot;</span>);<br><br>    option.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, name);<br>    option.setAttribute(<span class="hljs-string">&quot;value&quot;</span>, value);<br><br>    parent.appendChild(option)<br>&#125;<br><br>tasks.register(<span class="hljs-string">&#x27;createRunConfigurations&#x27;</span>) &#123;<br>    <span class="hljs-keyword">def</span> runConfigurationsDir = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;.idea/runConfigurations&quot;</span>)<br><br>    <span class="hljs-keyword">final</span> DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();<br>    <span class="hljs-keyword">final</span> DocumentBuilder docBuilder = docFactory.newDocumentBuilder();<br><br>    <span class="hljs-keyword">final</span> var javaDocument = docBuilder.newDocument();<br>    &#123;<br>        <span class="hljs-keyword">final</span> var rootElement = javaDocument.createElement(<span class="hljs-string">&quot;component&quot;</span>);<br>        &#123;<br>            <span class="hljs-keyword">final</span> var configuration = javaDocument.createElement(<span class="hljs-string">&quot;configuration&quot;</span>);<br>            &#123;<br>                configuration.setAttribute(<span class="hljs-string">&quot;default&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>                configuration.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;runServer&quot;</span>);<br>                configuration.setAttribute(<span class="hljs-string">&quot;type&quot;</span>, <span class="hljs-string">&quot;JarApplication&quot;</span>)<br><br>                createOption(javaDocument, configuration, <span class="hljs-string">&quot;JAR_PATH&quot;</span>, <span class="hljs-string">&quot;$&#123;targetServerPath&#125;/$&#123;targetServerJarName&#125;&quot;</span>)<br>                createOption(javaDocument, configuration, <span class="hljs-string">&quot;WORKING_DIRECTORY&quot;</span>, targetServerPath)<br><br>                var method = javaDocument.createElement(<span class="hljs-string">&quot;method&quot;</span>);<br>                &#123;<br>                    method.setAttribute(<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>)<br><br>                    var o1 = javaDocument.createElement(<span class="hljs-string">&quot;option&quot;</span>);<br><br>                    o1.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Gradle.BeforeRunTask&quot;</span>)<br>                    o1.setAttribute(<span class="hljs-string">&quot;enabled&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>)<br>                    o1.setAttribute(<span class="hljs-string">&quot;tasks&quot;</span>, <span class="hljs-string">&quot;build&quot;</span>)<br>                    o1.setAttribute(<span class="hljs-string">&quot;externalProjectPath&quot;</span>, <span class="hljs-string">&quot;\$PROJECT_DIR\$&quot;</span>)<br>                    o1.setAttribute(<span class="hljs-string">&quot;vmOptions&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                    o1.setAttribute(<span class="hljs-string">&quot;scriptParameters&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>                    method.appendChild(o1)<br><br>                    var o2 = javaDocument.createElement(<span class="hljs-string">&quot;option&quot;</span>);<br><br>                    o2.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;Gradle.BeforeRunTask&quot;</span>)<br>                    o2.setAttribute(<span class="hljs-string">&quot;enabled&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>)<br>                    o2.setAttribute(<span class="hljs-string">&quot;tasks&quot;</span>, <span class="hljs-string">&quot;copyArtifacts&quot;</span>)<br>                    o2.setAttribute(<span class="hljs-string">&quot;externalProjectPath&quot;</span>, <span class="hljs-string">&quot;\$PROJECT_DIR\$&quot;</span>)<br>                    o2.setAttribute(<span class="hljs-string">&quot;vmOptions&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br>                    o2.setAttribute(<span class="hljs-string">&quot;scriptParameters&quot;</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br>                    method.appendChild(o2)<br>                &#125;<br>                configuration.appendChild(method)<br>            &#125;<br>            rootElement.appendChild(configuration)<br>        &#125;<br>        javaDocument.appendChild(rootElement);<br>    &#125;<br><br>    <span class="hljs-keyword">final</span> TransformerFactory transformerFactory = TransformerFactory.newInstance();<br>    <span class="hljs-keyword">final</span> var transformer = transformerFactory.newTransformer();<br><br>    <span class="hljs-keyword">final</span> DOMSource source = <span class="hljs-keyword">new</span> DOMSource(javaDocument);<br>    <span class="hljs-keyword">final</span> File location = <span class="hljs-keyword">new</span> File(runConfigurationsDir, <span class="hljs-string">&quot;runServer.xml&quot;</span>);<br>    <span class="hljs-keyword">if</span> (!location.getParentFile().exists())<br>        location.getParentFile().mkdirs();<br>    <span class="hljs-keyword">final</span> StreamResult result = <span class="hljs-keyword">new</span> StreamResult(location);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        transformer.transform(source, result);<br>    &#125; <span class="hljs-keyword">catch</span> (TransformerException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该任务会生成一个 <code>JarApplication</code> 的配置文件，运行前会执行 <code>build</code> 与 <code>copyArtifacts</code> 两个 gradle 任务。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Bukkit</tag>
      
      <tag>Gradle</tag>
      
      <tag>Plugin</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
